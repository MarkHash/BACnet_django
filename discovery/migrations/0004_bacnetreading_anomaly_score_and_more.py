# Generated by Django 5.2.6 on 2025-09-09 00:54

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("discovery", "0003_alter_bacnetdevice_points_read"),
    ]

    operations = [
        migrations.AddField(
            model_name="bacnetreading",
            name="anomaly_score",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="bacnetreading",
            name="data_quality_score",
            field=models.FloatField(
                default=1.0,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(1.0),
                ],
            ),
        ),
        migrations.AddField(
            model_name="bacnetreading",
            name="is_anomaly",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="AlarmHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alarm_type",
                    models.CharField(
                        choices=[
                            ("high_limit", "High Limit Exceeded"),
                            ("low_limit", "Low Limit Exceeded"),
                            ("communication_failure", "Communication Failure"),
                            ("sensor_fault", "Sensor Fault"),
                            ("anomaly_detected", "Anomaly Detected"),
                            ("maintenance_due", "Maintenance Due"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("triggered_at", models.DateTimeField(auto_now_add=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("trigger_value", models.CharField(blank=True, max_length=100)),
                ("threshold_value", models.CharField(blank=True, max_length=100)),
                ("message", models.TextField()),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alarms",
                        to="discovery.bacnetdevice",
                    ),
                ),
                (
                    "point",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alarms",
                        to="discovery.bacnetpoint",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alarm History",
                "verbose_name_plural": "Alarm Histories",
                "ordering": ["-triggered_at"],
                "indexes": [
                    models.Index(
                        fields=["device", "-triggered_at"],
                        name="discovery_a_device__2d25f1_idx",
                    ),
                    models.Index(
                        fields=["is_active", "severity"],
                        name="discovery_a_is_acti_f9d9c7_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DeviceStatusHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("is_online", models.BooleanField()),
                ("response_time_ms", models.FloatField(blank=True, null=True)),
                ("successful_reads", models.IntegerField(default=0)),
                ("failed_reads", models.IntegerField(default=0)),
                (
                    "packet_loss_percent",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_history",
                        to="discovery.bacnetdevice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Device Status History",
                "verbose_name_plural": "Device Status Histories",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["device", "-timestamp"],
                        name="discovery_d_device__ce3da6_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("preventive", "Preventive Maintenance"),
                            ("corrective", "Corrective Maintenance"),
                            ("calibration", "Sensor Calibration"),
                            ("replacement", "Component Replacement"),
                            ("software_update", "Software Update"),
                        ],
                        max_length=20,
                    ),
                ),
                ("scheduled_date", models.DateTimeField()),
                ("completed_date", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField()),
                ("technicial_notes", models.TextField(blank=True)),
                ("predicted_failure_date", models.DateTimeField(blank=True, null=True)),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_logs",
                        to="discovery.bacnetdevice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Maintenance Log",
                "verbose_name_plural": "Maintenance Logs",
                "ordering": ["-scheduled_date"],
                "indexes": [
                    models.Index(
                        fields=["device", "-scheduled_date"],
                        name="discovery_m_device__93603a_idx",
                    ),
                    models.Index(
                        fields=["is_completed"], name="discovery_m_is_comp_756cb2_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SensorReadingStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aggregation_type",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        max_length=10,
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("avg_value", models.FloatField(blank=True, null=True)),
                ("min_value", models.FloatField(blank=True, null=True)),
                ("max_value", models.FloatField(blank=True, null=True)),
                ("std_dev", models.FloatField(blank=True, null=True)),
                ("reading_count", models.IntegerField(default=0)),
                ("null_reading_count", models.IntegerField(default=0)),
                ("anomaly_count", models.IntegerField(default=0)),
                (
                    "point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="discovery.bacnetpoint",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sensor Reading Statistics",
                "verbose_name_plural": "Sensor Reading Statistics",
                "ordering": ["-period_start"],
                "indexes": [
                    models.Index(
                        fields=["point", "aggregation_type", "-period_start"],
                        name="discovery_s_point_i_69d9ea_idx",
                    )
                ],
                "unique_together": {("point", "aggregation_type", "period_start")},
            },
        ),
    ]
